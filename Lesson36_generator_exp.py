#Генератор - итератор, элементы которого можно итерировать только один раз
#Итератор - объект, который поддерживает функцию next(). Помнит о том, какой элемент будет браться следующим.
#Итерируемый объект - объект, который предоставляет возможность обойти поочередно свои элементы. Может быть преобразован к итератору.
#итер. объект
from sqlite3 import IntegrityError


s=[1,2,3]
#итератор
d=iter(s)
print(next(d))#1
print(next(d))#2
print(next(d))#3
#print(next(d))#error

b = (i**2 for i in range(1, 6))
print(next(b))#1
for i in b:
    print(i)#1 4 9 16 25
for i in b:
    print(i)#ничего не будет
b1 = (i**2 for i in range(1, 6))
print(sum(b1))#55
print(sum(b1))#0

#генератор не хранит в памяти данные а формирует их на лету поэтому второй раз обойти генератор нельзя
#поэтому выражению не хватит памяти
#с = [i for i in range(1000000000000)]
#А используя генератор хвати
с = (i for i in range(100000000000))

d = (i**2 for i in range(1, 6))
e = list(d)#преобразование

def genf():
    for i in [10,20,25]:
        yield i#с этого места замораживается выполнение функции и при следующем вызове она начнет работать с этого места 

for i in genf():
    print(i)#10 20 25


def factor(n):
    pr=1
    for i in range(1, n+1):
        pr=pr*i
        yield pr

for i in factor(20):
    print(i,end=' ')
